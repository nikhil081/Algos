void inserte(stack<int> &s,int x){
    if(s.size()==0 || s.top()<x){
        s.push(x);
    }else{
        int a = s.top();
        s.pop();
        inserte(s,x);
        s.push(a);
    }
}

void reversee(stack<int> &s){
    if(s.size()>0){
        int x = s.top();
        s.pop();
        reversee(s);
        inserte(s,x);
    }
}


void SortedStack :: sort()
{
   reversee(s);
}

tack<int> sortStack(stack<int> &input)
{
    stack<int> tmpStack;
  
    while (!input.empty())
    {
        // pop out the first element
        int tmp = input.top();
        input.pop();
  
        // while temporary stack is not empty and top
        // of stack is greater than temp
        while (!tmpStack.empty() && tmpStack.top() > tmp)
        {
            // pop from temporary stack and push
            // it to the input stack
            input.push(tmpStack.top());
            tmpStack.pop();
        }
  
        // push temp in tempory of stack
        tmpStack.push(tmp);
    }
  
    return tmpStack;
}
